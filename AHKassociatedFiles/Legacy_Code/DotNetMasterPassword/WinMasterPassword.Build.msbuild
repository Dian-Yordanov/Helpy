<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0" DefaultTargets="default">
  <!-- MSBUILD Script: build binaries, create versioned ZIP of result for distribution -->
  <PropertyGroup>
    <!-- Version for Zip-File -->
    <OverallVersion>1.03.00</OverallVersion>
    
    <!-- Internal stuff -->
    <BaseDir>$(MSBuildProjectDirectory)</BaseDir>   
    <DistDir>$(MSBuildProjectDirectory)\Dist</DistDir>
    <Configuration Condition="'$(Configuration)'==''" >Release</Configuration>
    <Platform>Any CPU</Platform>
    <SolutionFile>$(BaseDir)\WinMasterPassword.sln</SolutionFile>
  </PropertyGroup>

  <!-- Default  -->
  <Target Name="default" DependsOnTargets="Clean; Compile; CopyToDist; Package; " />

  <!-- Clear Bin Directories-->
  <Target Name="Clean">
    <RemoveDir Directories="$(DistDir)" />
    <!-- Removing default output directories from Visual Studio, we ignore errors here (Visual Studio could be blocking those) -->
    <RemoveDir Directories="$(BaseDir)\WpfMasterPassword\Bin\" ContinueOnError="True"/>
    <RemoveDir Directories="$(BaseDir)\WpfMasterPassword\Obj\" ContinueOnError="True"/>
    <RemoveDir Directories="$(BaseDir)\ConsoleMasterPassword\Bin\" ContinueOnError="True"/>
    <RemoveDir Directories="$(BaseDir)\ConsoleMasterPassword\Obj\" ContinueOnError="True"/>
  </Target>

  <!-- Compile -->
  <Target Name="Compile">
    <MSBuild Projects="$(SolutionFile)" Properties="Configuration=$(Configuration);Platform=$(Platform)" />
  </Target>

  <!-- CopyToDist -->
  <Target Name="CopyToDist">
    <Copy SourceFiles="$(BaseDir)\WinMasterPassword.Changes.txt" DestinationFolder="$(DistDir)\Bin" />
    <Copy SourceFiles="$(BaseDir)\WpfMasterPassword\Bin\Release\MasterPasswordLib.dll" DestinationFolder="$(DistDir)\Bin" />
    <Copy SourceFiles="$(BaseDir)\WpfMasterPassword\Bin\Release\WpfMasterPassword.exe" DestinationFolder="$(DistDir)\Bin" />
    <Copy SourceFiles="$(BaseDir)\WpfMasterPassword\Bin\Release\WpfMasterPassword.exe.config" DestinationFolder="$(DistDir)\Bin" />
    <Copy SourceFiles="$(BaseDir)\ConsoleMasterPassword\Bin\Release\ConsoleMasterPassword.exe" DestinationFolder="$(DistDir)\Bin" />
    <Copy SourceFiles="$(BaseDir)\ConsoleMasterPassword\Bin\Release\ConsoleMasterPassword.exe.config" DestinationFolder="$(DistDir)\Bin" />
  </Target>

  <!-- Create ZIP -->
  <Target Name="Package">
    <ItemGroup>
      <FilesToZip Include="$(DistDir)\Bin\**\*.*" />
    </ItemGroup>
    <Zip
      InputFileNames="@(FilesToZip)"
      OutputFileName="$(DistDir)\WinMasterPassword_$(OverallVersion).zip"
      OverwriteExistingFile="true" />    
  </Target>
  
  <!-- Helper Stuff: Zip Task (from http://blog.3d-logic.com/2012/10/16/msbuild-zip-task-without-external-dependencies/) -->
  <UsingTask TaskName="Zip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFileNames ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[        
        const int BufferSize = 64 * 1024;

        var buffer = new byte[BufferSize];
        var fileMode = OverwriteExistingFile ? FileMode.Create : FileMode.CreateNew;

        using (var outputFileStream = new FileStream(OutputFileName, fileMode))
        {
          using (var archive = new ZipArchive(outputFileStream, ZipArchiveMode.Create))
          {
            foreach (var inputFileName in InputFileNames.Select(f => f.ItemSpec))
            {
              var archiveEntry = archive.CreateEntry(Path.GetFileName(inputFileName));

              using (var fs = new FileStream(inputFileName, FileMode.Open))
              {
                using (var zipStream = archiveEntry.Open())
                {
                  int bytesRead = -1;
                  while ((bytesRead = fs.Read(buffer, 0, BufferSize)) > 0)
                  {
                    zipStream.Write(buffer, 0, bytesRead);
                  }
                }
              }
            }
          }
        }        
      ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>